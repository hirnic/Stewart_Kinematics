# This script contains the test data from the Pose Finders. 

domain = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]

# This is the average number of iterations it takes to find the pose. Repeatable within 1 decimal place.
Euler_Angles_iters = {
                'Standard': {
                    'Unmodified':             [2.9992, 3.4991, 3.8895, 4.1149, 4.4471, 4.8396, 5.2502, 5.6150, 5.8806, 6.1141],
                    #'Num':                  [2.9992, 3.4991, 3.8897, 4.1149, 4.4472, 4.8394, 5.2504, 5.6143, 5.8818, 6.1132],
                    'Neural':          [1.9997, 2.2948, 2.7699, 3.0115, 3.2279, 3.5196, 3.9674, 4.2755, 4.6242, 4.8951],
                    #'Neural, Num':     [1.9997, 2.2949, 2.7699, 3.0117, 3.2285, 3.5188, 3.9667, 4.2733, 4.6254, 4.8944],
                    'Mono':                 [2.9992, 3.4991, 3.8897, 4.1162, 4.4533, 4.8621, 5.3078, 5.7193, 6.0093, 6.2822],
                    #'Mono, Num':            [2.9992, 3.4991, 3.8899, 4.1162, 4.4534, 4.8621, 5.3081, 5.7187, 6.0091, 6.2824],
                    'Mono, Neural':         [1.9997, 2.2948, 2.7699, 3.0116, 3.2260, 3.5148, 3.9724, 4.3024, 4.6603, 4.9521],
                    #'Mono, Neural, Num':    [1.9997, 2.2949, 2.7699, 3.0118, 3.2266, 3.5138, 3.9719, 4.3009, 4.6619, 4.9526]
                    },

                'Screw': {
                    'Unmodified':             [2.9997, 3.4842, 3.9182, 4.0427, 4.3218, 4.6859, 5.1005, 5.5197, 5.8932, 6.2483],
                    'Neural':               [1.9997, 2.3138, 2.8182, 3.0207, 3.2358, 3.5402, 4.0562, 4.5463, 5.0444, 5.4761],
                    'Mono':                 [2.9997, 3.4842, 3.9183, 4.0441, 4.3255, 4.6947, 5.0901, 5.4866, 5.8020, 6.1047],
                    'Mono, Neural':         [1.9997, 2.3138, 2.8182, 3.0208, 3.2347, 3.5280, 3.9894, 4.3579, 4.7521, 5.0693]
                    }
                }

Dual_Quaternions_iters = {
                'Standard': {
                    'Unmodified':             [4.0896, 4.4509, 4.8149, 5.1561, 5.5241, 5.9279, 6.2924, 6.6365, 6.9610, 7.1761],
                    'Num':                  [4.8639, 5.1653, 5.5023, 5.8190, 6.1668, 6.5558, 6.9259, 7.3159, 7.6695, 7.8918],
                    'Neural':               [3.2844, 3.5845, 3.9707, 4.3364, 4.6776, 5.1254, 5.5245, 5.9267, 6.2793, 6.5738],
                    'Neural, Num':          [4.3787, 4.6096, 4.8711, 5.1320, 5.4447, 5.8439, 6.2309, 6.6825, 7.0623, 7.3164],
                    # 'Mono':                 [4.0896, 4.4510, 4.8149, 5.1566, 5.5259, 5.9318, 6.2907, 6.6368, 6.9604, 7.1498],
                    # 'Mono, Num':            [4.8650, 5.1719, 5.5138, 5.8375, 6.1985, 6.5988, 6.9673, 7.3368, 7.6674, 7.8471],
                    # 'Mono, Neural':         [3.2850, 3.5858, 3.9759, 4.3496, 4.7144, 5.1964, 5.5880, 6.0145, 6.2914, 6.5425],
                    # 'Mono, Neural, Num':    [4.3800, 4.6219, 4.8953, 5.1706, 5.5315, 5.9671, 6.3840, 6.7810, 7.0083, 7.2544]
                    },

                'Screw': {
                    'Unmodified':             [3.4089, 3.4301, 3.4897, 3.5378, 3.6096, 3.6817, 3.7492, 3.8293, 3.9680, 4.0966],
                    'Neural':               [2.3531, 2.2603, 2.1998, 2.2590, 2.3766, 2.5229, 2.6444, 2.8679, 3.1271, 3.3263],
                    # 'Mono':                 [3.4089, 3.4301, 3.4898, 3.5381, 3.6103, 3.6854, 3.7526, 3.8337, 3.9695, 4.0888],
                    # 'Mono, Neural':         [2.3531, 2.2603, 2.1998, 2.2590, 2.3766, 2.5229, 2.6423, 2.8611, 3.0922, 3.2616]
                    }
                }


# This is the failure rate of the pose finders. Repeatable to within about 10 trials per 10000.
Euler_Angles_fails = {
                'Standard': {
                    'Unmodified':           [0,0,0,0,1,46,355,941,1673,2520],
                    #'Num':                  [0,0,0,0,1,46,355,942,1672,2521],
                    'Neural ':              [0,0,0,0,1,40,199,559,979,1426],
                    #'Neural, Num':          [0,0,0,0,1,41,199,562,975,1427],
                    'Mono':                 [0,0,0,0,0,21,155,487,990,1603],
                    #'Mono, Num':            [0,0,0,0,0,21,155,487,991,1603],
                    'Mono, Neural':         [0,0,0,0,1,6,48,229,436,726],
                    #'Mono, Neural, Num':    [0,0,0,0,1,7,48,231,431,726]
                    },

                'Screw': {
                    'Standard':             [0,0,0,0,0,2,12,72,182,338],
                    'Neural':               [0,0,0,0,0,16,59,178,318,500],
                    'Mono':                 [0,0,0,0,0,3,22,80,211,391],
                    'Mono, Neural':         [0,0,0,0,0,3,26,124,256,450]
                    }
                }

Dual_Quaternions_fails = {
                'Standard': {
                    'Unmodified':             [0, 0, 0, 0, 3, 15, 101, 307, 711, 1027],
                    'Num.':                  [0, 0, 0, 0, 0, 18, 122, 356, 837, 1218],
                    'Neural':               [0, 0, 0, 0, 0, 11, 93, 317, 765, 1121],
                    'Neural, Num.':          [0, 0, 0, 0, 0, 19, 134, 376, 888, 1330],
                    # 'Mono':                 [0, 0, 1, 0, 4, 20, 119, 343, 754, 1116],
                    # 'Mono, Num':            [0, 0, 1, 0, 0, 31, 169, 466, 1012, 1425],
                    # 'Mono, Neural':         [0, 0, 0, 0, 1, 26, 148, 405, 960, 1363],
                    # 'Mono, Neural, Num':    [0, 0, 1, 1, 9, 61, 262, 646, 1281, 1758]
                    },

                'Screw': {
                    'Unmodified':             [0, 0, 0, 0, 0, 0, 0, 0, 0, 3],
                    'Neural':               [0, 0, 0, 0, 0, 0, 0, 2, 12, 40],
                    # 'Mono':                 [0, 0, 1, 0, 10, 26, 35, 37, 49, 81],
                    # 'Mono, Neural':         [0, 0, 1, 0, 0, 0, 7, 22, 82, 151]
                    }
                }

import matplotlib.pyplot as plt
import numpy as np
data = []
colors = ['red', 'orange', 'green', 'blue', 'purple', 'black', 'gray', 'gold', 'aqua', 'brown', 'yellow', 
          'pink']  # Add more if needed
line_styles = ['-', '--', ':', '-.', (0, (5, 10)), (0, (1, 1)), (0, (3, 5, 1, 5)), (0, (1, 10)), (0, (5, 1)), (0, (3, 1, 1, 1)), (0, (2, 4)), (0, (4, 2, 1, 2))]

plt.figure(figsize=(8, 6))  # <-- This should come first

i = 0
for key in Euler_Angles_iters['Standard']:
    y = np.array(Euler_Angles_iters['Standard'][key])/100
    plt.plot(domain, y, color=colors[i], label=f'Standard {key}', linestyle='-')
    i += 1

for key in Euler_Angles_iters['Screw']:
    y = np.array(Euler_Angles_iters['Screw'][key])/100
    plt.plot(domain, y, color=colors[i], label=f'Lie {key}', linestyle='-')
    i += 1

plt.xlabel("Max Angle and Translation (rad, m)")
plt.ylabel("Failures (%)")
plt.title("Failure Rate by Method (Euler Angles)")
plt.xticks(np.arange(min(domain), max(domain) + 0.1, 0.1))  # Set x-ticks every 0.1

plt.legend(ncol=2, fontsize='small')

plt.tight_layout()
plt.show()
